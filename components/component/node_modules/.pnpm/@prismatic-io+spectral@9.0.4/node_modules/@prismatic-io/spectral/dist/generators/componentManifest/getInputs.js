"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.INPUT_TYPE_MAP = exports.getInputs = void 0;
const docBlock_1 = require("./docBlock");
const getInputs = ({ inputs, docBlock = docBlock_1.DOC_BLOCK_DEFAULT }) => {
    return inputs.reduce((acc, input) => {
        if ((typeof input.shown === "boolean" && input.shown === false) ||
            input.type === "dynamicObjectSelection" ||
            input.type === "dynamicFieldSelection") {
            return acc;
        }
        return [
            ...acc,
            {
                key: input.key,
                label: input.label,
                inputType: input.type,
                valueType: getInputValueType(input),
                required: input.required && (input.default === undefined || input.default === ""),
                collection: input.collection,
                onPremControlled: input.onPremiseControlled || input.onPremControlled,
                docBlock: docBlock(input),
            },
        ];
    }, []);
};
exports.getInputs = getInputs;
exports.INPUT_TYPE_MAP = {
    string: "string",
    data: "string",
    text: "string",
    password: "string",
    boolean: "boolean",
    code: "string",
    conditional: {
        type: "ConditionalExpression",
        module: "@prismatic-io/spectral",
    },
    connection: {
        type: "Connection",
        module: "@prismatic-io/spectral",
    },
    objectSelection: {
        type: "ObjectSelection",
        module: "@prismatic-io/spectral",
    },
    objectFieldMap: {
        type: "ObjectFieldMap",
        module: "@prismatic-io/spectral",
    },
    jsonForm: {
        type: "JSONForm",
        module: "@prismatic-io/spectral",
    },
    dynamicObjectSelection: "string",
    dynamicFieldSelection: "string",
};
const getInputValueType = (input) => {
    const valueType = input.model
        ? input.model
            .map((choice) => {
            return `\`${choice.value.replaceAll("\r", "\\r").replaceAll("\n", "\\n")}\``;
        })
            .join(" | ")
        : exports.INPUT_TYPE_MAP[input.type] || "never";
    if (input.collection === "keyvaluelist") {
        return `Record<string, ${valueType}> | Array<{key: string, value: ${valueType}}>`;
    }
    if (input.collection === "valuelist") {
        return `${valueType}[]`;
    }
    return valueType;
};
