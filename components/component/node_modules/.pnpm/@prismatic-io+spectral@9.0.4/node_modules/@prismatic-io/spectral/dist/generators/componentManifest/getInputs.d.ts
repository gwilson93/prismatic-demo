import type { Input as InputBase } from "../../serverTypes";
import type { InputFieldDefinition } from "../../types/Inputs";
export type ServerTypeInput = InputBase & {
    onPremControlled?: boolean;
    shown?: boolean;
};
export interface Input {
    key: string;
    label: string;
    inputType: string;
    valueType: ValueType;
    docBlock: string;
    required: boolean | undefined;
}
export type ValueType = string | {
    type: string;
    module: string;
};
export type DocBlock = {
    inputKey?: string;
    propertyKey: keyof ServerTypeInput;
    propertyValue?: unknown;
    output?: string;
}[];
interface GetInputsProps {
    inputs: ServerTypeInput[];
    docBlock?: (input: ServerTypeInput) => string;
}
export declare const getInputs: ({ inputs, docBlock }: GetInputsProps) => Input[];
export declare const INPUT_TYPE_MAP: Record<InputFieldDefinition["type"], ValueType>;
export {};
