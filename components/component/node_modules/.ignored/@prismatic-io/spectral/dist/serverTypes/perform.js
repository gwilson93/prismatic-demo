"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPerform = void 0;
const cleanParams = (params, cleaners) => Object.entries(params).reduce((result, [key, value]) => {
    const cleanFn = cleaners[key];
    return Object.assign(Object.assign({}, result), { [key]: cleanFn ? cleanFn(value) : value });
}, {});
const createPerform = (performFn, { inputCleaners, errorHandler }) => {
    return (...args) => __awaiter(void 0, void 0, void 0, function* () {
        try {
            if (args.length === 1) {
                const [params] = args;
                return yield performFn(cleanParams(params, inputCleaners));
            }
            if (args.length === 2) {
                const [context, params] = args;
                return yield performFn(context, cleanParams(params, inputCleaners));
            }
            const [context, payload, params] = args;
            return yield performFn(context, payload, cleanParams(params, inputCleaners));
        }
        catch (error) {
            throw errorHandler ? errorHandler(error) : error;
        }
    });
};
exports.createPerform = createPerform;
