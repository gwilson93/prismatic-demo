import { AxiosResponse } from "axios";
import { AxiosInstance, AxiosRequestConfig } from "axios";
import { IAxiosRetryConfig } from "axios-retry";
import { ActionInputParameters } from "../../types";
import { inputs } from "./inputs";
export declare type HttpClient = AxiosInstance;
interface RetryConfig extends Omit<IAxiosRetryConfig, "retryDelay"> {
    retryDelay?: IAxiosRetryConfig["retryDelay"] | number;
    retryAllErrors?: boolean;
    useExponentialBackoff?: boolean;
}
export interface ClientProps {
    baseUrl?: string;
    responseType?: AxiosRequestConfig["responseType"];
    headers?: AxiosRequestConfig["headers"];
    params?: Record<string, any>;
    timeout?: number;
    debug?: boolean;
    retryConfig?: RetryConfig;
}
export declare const createClient: ({ baseUrl, responseType, headers, timeout, params, debug, retryConfig, }: ClientProps) => HttpClient;
export declare const handleErrors: (error: unknown) => unknown;
declare type SendRawRequestValues = ActionInputParameters<typeof inputs>;
export declare const sendRawRequest: (baseUrl: string, values: SendRawRequestValues, authorizationHeaders?: Record<string, string>) => Promise<AxiosResponse>;
export declare const buildRawRequestAction: (baseUrl: string, label?: string, description?: string) => import("../..").ActionDefinition<{
    url: {
        label: string;
        placeholder: string;
        type: "string";
        required: true;
        comments: string;
        example: string;
        clean: (value: unknown) => string;
    };
    method: {
        label: string;
        type: "string";
        required: true;
        model: {
            label: import("axios").Method;
            value: import("axios").Method;
        }[];
        comments: string;
        clean: (value: unknown) => string;
    };
    data: {
        label: string;
        placeholder: string;
        type: "string";
        required: false;
        comments: string;
        example: string;
    };
    formData: {
        label: string;
        placeholder: string;
        type: "string";
        collection: "keyvaluelist";
        required: false;
        comments: string;
        example: string;
    };
    fileData: {
        label: string;
        placeholder: string;
        type: "string";
        collection: "keyvaluelist";
        required: false;
        comments: string;
        example: string;
    };
    fileDataFileNames: {
        label: string;
        placeholder: string;
        type: "string";
        collection: "keyvaluelist";
        required: false;
        comments: string;
        clean: (values: any) => Record<string, string> | undefined;
    };
    queryParams: {
        label: string;
        placeholder: string;
        type: "string";
        collection: "keyvaluelist";
        required: false;
        comments: string;
    };
    headers: {
        label: string;
        placeholder: string;
        type: "string";
        collection: "keyvaluelist";
        required: false;
        comments: string;
        example: string;
    };
    responseType: {
        label: string;
        placeholder: string;
        type: "string";
        default: string;
        required: true;
        comments: string;
        model: {
            label: import("axios").ResponseType;
            value: import("axios").ResponseType;
        }[];
        clean: (value: unknown) => import("axios").ResponseType;
    };
    timeout: {
        label: string;
        type: "string";
        required: false;
        comments: string;
        example: string;
        clean: (value: unknown) => number;
    };
    debugRequest: {
        label: string;
        type: "boolean";
        required: false;
        comments: string;
        clean: (value: unknown) => boolean;
    };
    retryDelayMS: {
        label: string;
        placeholder: string;
        type: "string";
        required: false;
        comments: string;
        default: string;
        clean: (value: unknown) => number;
    };
    retryAllErrors: {
        label: string;
        type: "boolean";
        default: string;
        required: false;
        comments: string;
        clean: (value: unknown) => boolean;
    };
    maxRetries: {
        label: string;
        placeholder: string;
        type: "string";
        required: false;
        comments: string;
        default: string;
        clean: (value: unknown) => number;
    };
    useExponentialBackoff: {
        label: string;
        type: "boolean";
        default: string;
        required: false;
        comments: string;
        clean: (value: unknown) => boolean;
    };
    connection: {
        label: string;
        type: "connection";
        required: true;
    };
}, import("../..").ConfigVarResultCollection, boolean, {
    data: any;
}>;
export { inputs };
